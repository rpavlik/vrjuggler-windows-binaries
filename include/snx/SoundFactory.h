/****************** <SNX heading BEGIN do not edit this line> *****************
 *
 * sonix
 *
 * Original Authors:
 *   Kevin Meinert
 *
 ****************** <SNX heading END do not edit this line> ******************/

/*************** <auto-copyright.pl BEGIN do not edit this line> **************
 *
 * VR Juggler is (C) Copyright 1998-2010 by Iowa State University
 *
 * Original Authors:
 *   Allen Bierbaum, Christopher Just,
 *   Patrick Hartling, Kevin Meinert,
 *   Carolina Cruz-Neira, Albert Baker
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 *
 *************** <auto-copyright.pl END do not edit this line> ***************/

/* Generated by Together */

#ifndef SNXSOUNDFACTORY_H
#define SNXSOUNDFACTORY_H

#include <snx/snxConfig.h>

#include <string>
#include <map>

#include <vpr/Util/Singleton.h>
#include <vpr/DynLoad/Library.h>
#include <vpr/DynLoad/LibraryFinder.h>
#include <vpr/DynLoad/Library.h>

#include "snx/ISoundImplementation.h"

namespace snx
{

/** \class SoundFactory SoundFactory.h snx/SoundFactory.h
 *
 * Sound factory.
 */
class SNX_CLASS_API SoundFactory
{
public:
   void errorOutput(vpr::LibraryPtr lib, const char* test);

   bool isPlugin(vpr::LibraryPtr lib);

   void loadPlugins(vpr::LibraryFinder::LibraryList libs);

   void unloadPlugins();

   /**
    * Factory function used to create an implementation of a sound API.
    *
    * @post If apiName is not known, then a stub implementation is returned.
    *
    * @param apiName         Name of API to create.
    * @param mImplementation An implementation is returned for you to use.
    */
   void createImplementation( const std::string& apiName,
                              snx::ISoundImplementation* &mImplementation );

   // pass valid pointer to a sound implementation with a name it's refered to
   // or... pass NULL to unregister/delete apiName...
   void reg(const std::string& apiName, snx::ISoundImplementation* impl);

   std::map< std::string, snx::ISoundImplementation* > mRegisteredImplementations;
   std::vector<vpr::LibraryPtr> mPlugins;

private:
   SoundFactory();

   /** @link dependency */
   /*#  snx::ISoundImplementation lnkSoundImplementation; */

   /** @link dependency */
   /*#  snx::StubSoundImplementation lnksnx::StubSoundImplementation; */

   /** @link dependency */
   /*#  snx::AudioWorksSoundImplementation lnksnx::AudioWorksSoundImplementation; */

   /** @link dependency */
   /*#  snx::OpenALSoundImplementation lnksnx::OpenALSoundImplementation; */

   /** @link aggregation
    * @clientCardinality 1
    * @supplierCardinality 0..*
    * @directed */
   /*#  snx::ISoundImplementation lnkSoundImplementation1; */

   vprSingletonHeader(SoundFactory);
};

template <class _type>
class SoundFactoryReg
{
public:
   _type mSoundAPI;
   std::string mNameOfAPI;
   SoundFactoryReg( const std::string& apiName ) : mSoundAPI(), mNameOfAPI( apiName )
   {
      mSoundAPI.setName( mNameOfAPI );
      snx::SoundFactory::instance()->reg( mNameOfAPI, &mSoundAPI );
   }
   virtual ~SoundFactoryReg()
   {
      mSoundAPI.setName( "unavailable/deleted/nomore" );
      snx::SoundFactory::instance()->reg( mNameOfAPI, NULL );
   }
};

} // end namespace


#endif //SNXSOUNDFACTORY_H
