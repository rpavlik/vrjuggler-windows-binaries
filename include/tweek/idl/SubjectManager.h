// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __SubjectManager_hh__
#define __SubjectManager_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_SubjectManager
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_SubjectManager
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_SubjectManager
#endif



#ifndef __Observer_hh_EXTERNAL_GUARD__
#define __Observer_hh_EXTERNAL_GUARD__
#include <Observer.h>
#endif
#ifndef __Subject_hh_EXTERNAL_GUARD__
#define __Subject_hh_EXTERNAL_GUARD__
#include <Subject.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE tweek

_CORBA_MODULE_BEG

#ifndef __tweek_mSubjectManager__
#define __tweek_mSubjectManager__

  class SubjectManager;
  class _objref_SubjectManager;
  class _impl_SubjectManager;
  
  typedef _objref_SubjectManager* SubjectManager_ptr;
  typedef SubjectManager_ptr SubjectManagerRef;

  class SubjectManager_Helper {
  public:
    typedef SubjectManager_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_SubjectManager, SubjectManager_Helper> SubjectManager_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_SubjectManager,SubjectManager_Helper > SubjectManager_out;

#endif

  // interface SubjectManager
  class SubjectManager {
  public:
    // Declarations for this interface type.
    typedef SubjectManager_ptr _ptr_type;
    typedef SubjectManager_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    struct RegisteredSubject {
      typedef _CORBA_ConstrType_Variable_Var<RegisteredSubject> _var_type;

      
      ::CORBA::String_member subject_name;

      _CORBA_ObjRef_Member< _objref_Subject, Subject_Helper>  subject_ref;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef RegisteredSubject::_var_type RegisteredSubject_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< RegisteredSubject,RegisteredSubject_var > RegisteredSubject_out;

    struct SubjectMgrInfoItem {
      typedef _CORBA_ConstrType_Variable_Var<SubjectMgrInfoItem> _var_type;

      
      ::CORBA::String_member key;

      ::CORBA::String_member value;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SubjectMgrInfoItem::_var_type SubjectMgrInfoItem_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SubjectMgrInfoItem,SubjectMgrInfoItem_var > SubjectMgrInfoItem_out;

    class SubjectList_var;

    class SubjectList : public _CORBA_Unbounded_Sequence< RegisteredSubject >  {
    public:
      typedef SubjectList_var _var_type;
      inline SubjectList() {}
      inline SubjectList(const SubjectList& _s)
        : _CORBA_Unbounded_Sequence< RegisteredSubject > (_s) {}

      inline SubjectList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< RegisteredSubject > (_max) {}
      inline SubjectList(_CORBA_ULong _max, _CORBA_ULong _len, RegisteredSubject* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< RegisteredSubject > (_max, _len, _val, _rel) {}

    

      inline SubjectList& operator = (const SubjectList& _s) {
        _CORBA_Unbounded_Sequence< RegisteredSubject > ::operator=(_s);
        return *this;
      }
    };

    class SubjectList_out;

    class SubjectList_var {
    public:
      inline SubjectList_var() : _pd_seq(0) {}
      inline SubjectList_var(SubjectList* _s) : _pd_seq(_s) {}
      inline SubjectList_var(const SubjectList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new SubjectList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~SubjectList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline SubjectList_var& operator = (SubjectList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline SubjectList_var& operator = (const SubjectList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new SubjectList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline RegisteredSubject& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline SubjectList* operator -> () { return _pd_seq; }
      inline const SubjectList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator SubjectList& () const { return *_pd_seq; }
#else
      inline operator const SubjectList& () const { return *_pd_seq; }
      inline operator SubjectList& () { return *_pd_seq; }
#endif
        
      inline const SubjectList& in() const { return *_pd_seq; }
      inline SubjectList&       inout()    { return *_pd_seq; }
      inline SubjectList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline SubjectList* _retn() { SubjectList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class SubjectList_out;
      
    private:
      SubjectList* _pd_seq;
    };

    class SubjectList_out {
    public:
      inline SubjectList_out(SubjectList*& _s) : _data(_s) { _data = 0; }
      inline SubjectList_out(SubjectList_var& _s)
        : _data(_s._pd_seq) { _s = (SubjectList*) 0; }
      inline SubjectList_out(const SubjectList_out& _s) : _data(_s._data) {}
      inline SubjectList_out& operator = (const SubjectList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline SubjectList_out& operator = (SubjectList* _s) {
        _data = _s;
        return *this;
      }
      inline operator SubjectList*&()  { return _data; }
      inline SubjectList*& ptr()       { return _data; }
      inline SubjectList* operator->() { return _data; }

      inline RegisteredSubject& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      SubjectList*& _data;

    private:
      SubjectList_out();
      SubjectList_out& operator=(const SubjectList_var&);
    };

    class SubjectManagerInfoList_var;

    class SubjectManagerInfoList : public _CORBA_Unbounded_Sequence< SubjectMgrInfoItem >  {
    public:
      typedef SubjectManagerInfoList_var _var_type;
      inline SubjectManagerInfoList() {}
      inline SubjectManagerInfoList(const SubjectManagerInfoList& _s)
        : _CORBA_Unbounded_Sequence< SubjectMgrInfoItem > (_s) {}

      inline SubjectManagerInfoList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< SubjectMgrInfoItem > (_max) {}
      inline SubjectManagerInfoList(_CORBA_ULong _max, _CORBA_ULong _len, SubjectMgrInfoItem* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< SubjectMgrInfoItem > (_max, _len, _val, _rel) {}

    

      inline SubjectManagerInfoList& operator = (const SubjectManagerInfoList& _s) {
        _CORBA_Unbounded_Sequence< SubjectMgrInfoItem > ::operator=(_s);
        return *this;
      }
    };

    class SubjectManagerInfoList_out;

    class SubjectManagerInfoList_var {
    public:
      inline SubjectManagerInfoList_var() : _pd_seq(0) {}
      inline SubjectManagerInfoList_var(SubjectManagerInfoList* _s) : _pd_seq(_s) {}
      inline SubjectManagerInfoList_var(const SubjectManagerInfoList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new SubjectManagerInfoList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~SubjectManagerInfoList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline SubjectManagerInfoList_var& operator = (SubjectManagerInfoList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline SubjectManagerInfoList_var& operator = (const SubjectManagerInfoList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new SubjectManagerInfoList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline SubjectMgrInfoItem& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline SubjectManagerInfoList* operator -> () { return _pd_seq; }
      inline const SubjectManagerInfoList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator SubjectManagerInfoList& () const { return *_pd_seq; }
#else
      inline operator const SubjectManagerInfoList& () const { return *_pd_seq; }
      inline operator SubjectManagerInfoList& () { return *_pd_seq; }
#endif
        
      inline const SubjectManagerInfoList& in() const { return *_pd_seq; }
      inline SubjectManagerInfoList&       inout()    { return *_pd_seq; }
      inline SubjectManagerInfoList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline SubjectManagerInfoList* _retn() { SubjectManagerInfoList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class SubjectManagerInfoList_out;
      
    private:
      SubjectManagerInfoList* _pd_seq;
    };

    class SubjectManagerInfoList_out {
    public:
      inline SubjectManagerInfoList_out(SubjectManagerInfoList*& _s) : _data(_s) { _data = 0; }
      inline SubjectManagerInfoList_out(SubjectManagerInfoList_var& _s)
        : _data(_s._pd_seq) { _s = (SubjectManagerInfoList*) 0; }
      inline SubjectManagerInfoList_out(const SubjectManagerInfoList_out& _s) : _data(_s._data) {}
      inline SubjectManagerInfoList_out& operator = (const SubjectManagerInfoList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline SubjectManagerInfoList_out& operator = (SubjectManagerInfoList* _s) {
        _data = _s;
        return *this;
      }
      inline operator SubjectManagerInfoList*&()  { return _data; }
      inline SubjectManagerInfoList*& ptr()       { return _data; }
      inline SubjectManagerInfoList* operator->() { return _data; }

      inline SubjectMgrInfoItem& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      SubjectManagerInfoList*& _data;

    private:
      SubjectManagerInfoList_out();
      SubjectManagerInfoList_out& operator=(const SubjectManagerInfoList_var&);
    };

  
  };

  class _objref_SubjectManager :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Boolean hasSubject(const char* name);
    Subject_ptr getSubject(const char* name);
    SubjectManager::SubjectList* getAllSubjects();
    SubjectManager::SubjectManagerInfoList* getInfo();
    char* getName();

    inline _objref_SubjectManager()  { _PR_setobj(0); }  // nil
    _objref_SubjectManager(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_SubjectManager();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_SubjectManager(const _objref_SubjectManager&);
    _objref_SubjectManager& operator = (const _objref_SubjectManager&);
    // not implemented

    friend class SubjectManager;
  };

  class _pof_SubjectManager : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_SubjectManager() : _OMNI_NS(proxyObjectFactory)(SubjectManager::_PD_repoId) {}
    virtual ~_pof_SubjectManager();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_SubjectManager :
    public virtual omniServant
  {
  public:
    virtual ~_impl_SubjectManager();

    virtual ::CORBA::Boolean hasSubject(const char* name) = 0;
    virtual Subject_ptr getSubject(const char* name) = 0;
    virtual SubjectManager::SubjectList* getAllSubjects() = 0;
    virtual SubjectManager::SubjectManagerInfoList* getInfo() = 0;
    virtual char* getName() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_tweek
_CORBA_MODULE_BEG

  class SubjectManager :
    public virtual tweek::_impl_SubjectManager,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~SubjectManager();

    inline ::tweek::SubjectManager_ptr _this() {
      return (::tweek::SubjectManager_ptr) _do_this(::tweek::SubjectManager::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_tweek
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
tweek::SubjectManager::_marshalObjRef(::tweek::SubjectManager_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_SubjectManager
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_SubjectManager
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_SubjectManager
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_SubjectManager
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_SubjectManager
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_SubjectManager
#endif

#endif  // __SubjectManager_hh__

