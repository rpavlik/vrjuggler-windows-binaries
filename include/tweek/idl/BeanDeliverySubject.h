// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __BeanDeliverySubject_hh__
#define __BeanDeliverySubject_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_BeanDeliverySubject
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_BeanDeliverySubject
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_BeanDeliverySubject
#endif



#ifndef __Observer_hh_EXTERNAL_GUARD__
#define __Observer_hh_EXTERNAL_GUARD__
#include <Observer.h>
#endif
#ifndef __Subject_hh_EXTERNAL_GUARD__
#define __Subject_hh_EXTERNAL_GUARD__
#include <Subject.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE tweek

_CORBA_MODULE_BEG

  class BeanNameList_var;

  class BeanNameList : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef BeanNameList_var _var_type;
    inline BeanNameList() {}
    inline BeanNameList(const BeanNameList& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline BeanNameList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline BeanNameList(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline BeanNameList& operator = (const BeanNameList& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class BeanNameList_out;

  class BeanNameList_var {
  public:
    inline BeanNameList_var() : _pd_seq(0) {}
    inline BeanNameList_var(BeanNameList* _s) : _pd_seq(_s) {}
    inline BeanNameList_var(const BeanNameList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new BeanNameList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~BeanNameList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline BeanNameList_var& operator = (BeanNameList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline BeanNameList_var& operator = (const BeanNameList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new BeanNameList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline BeanNameList* operator -> () { return _pd_seq; }
    inline const BeanNameList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator BeanNameList& () const { return *_pd_seq; }
#else
    inline operator const BeanNameList& () const { return *_pd_seq; }
    inline operator BeanNameList& () { return *_pd_seq; }
#endif
      
    inline const BeanNameList& in() const { return *_pd_seq; }
    inline BeanNameList&       inout()    { return *_pd_seq; }
    inline BeanNameList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline BeanNameList* _retn() { BeanNameList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class BeanNameList_out;
    
  private:
    BeanNameList* _pd_seq;
  };

  class BeanNameList_out {
  public:
    inline BeanNameList_out(BeanNameList*& _s) : _data(_s) { _data = 0; }
    inline BeanNameList_out(BeanNameList_var& _s)
      : _data(_s._pd_seq) { _s = (BeanNameList*) 0; }
    inline BeanNameList_out(const BeanNameList_out& _s) : _data(_s._data) {}
    inline BeanNameList_out& operator = (const BeanNameList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline BeanNameList_out& operator = (BeanNameList* _s) {
      _data = _s;
      return *this;
    }
    inline operator BeanNameList*&()  { return _data; }
    inline BeanNameList*& ptr()       { return _data; }
    inline BeanNameList* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    BeanNameList*& _data;

  private:
    BeanNameList_out();
    BeanNameList_out& operator=(const BeanNameList_var&);
  };

  class BeanStream_var;

  class BeanStream : public _CORBA_Unbounded_Sequence_Octet {
  public:
    typedef BeanStream_var _var_type;
    inline BeanStream() {}
    inline BeanStream(const BeanStream& _s)
      : _CORBA_Unbounded_Sequence_Octet(_s) {}

    inline BeanStream(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_Octet(_max) {}
    inline BeanStream(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

  

    inline BeanStream& operator = (const BeanStream& _s) {
      _CORBA_Unbounded_Sequence_Octet::operator=(_s);
      return *this;
    }
  };

  class BeanStream_out;

  class BeanStream_var {
  public:
    inline BeanStream_var() : _pd_seq(0) {}
    inline BeanStream_var(BeanStream* _s) : _pd_seq(_s) {}
    inline BeanStream_var(const BeanStream_var& _s) {
      if( _s._pd_seq )  _pd_seq = new BeanStream(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~BeanStream_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline BeanStream_var& operator = (BeanStream* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline BeanStream_var& operator = (const BeanStream_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new BeanStream;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline BeanStream* operator -> () { return _pd_seq; }
    inline const BeanStream* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator BeanStream& () const { return *_pd_seq; }
#else
    inline operator const BeanStream& () const { return *_pd_seq; }
    inline operator BeanStream& () { return *_pd_seq; }
#endif
      
    inline const BeanStream& in() const { return *_pd_seq; }
    inline BeanStream&       inout()    { return *_pd_seq; }
    inline BeanStream*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline BeanStream* _retn() { BeanStream* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class BeanStream_out;
    
  private:
    BeanStream* _pd_seq;
  };

  class BeanStream_out {
  public:
    inline BeanStream_out(BeanStream*& _s) : _data(_s) { _data = 0; }
    inline BeanStream_out(BeanStream_var& _s)
      : _data(_s._pd_seq) { _s = (BeanStream*) 0; }
    inline BeanStream_out(const BeanStream_out& _s) : _data(_s._data) {}
    inline BeanStream_out& operator = (const BeanStream_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline BeanStream_out& operator = (BeanStream* _s) {
      _data = _s;
      return *this;
    }
    inline operator BeanStream*&()  { return _data; }
    inline BeanStream*& ptr()       { return _data; }
    inline BeanStream* operator->() { return _data; }

    inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    BeanStream*& _data;

  private:
    BeanStream_out();
    BeanStream_out& operator=(const BeanStream_var&);
  };

  struct BeanInfo {
    typedef _CORBA_ConstrType_Variable_Var<BeanInfo> _var_type;

    
    ::CORBA::String_member name;

    ::CORBA::String_member introspectorClassName;

    BeanStream jarFile;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef BeanInfo::_var_type BeanInfo_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< BeanInfo,BeanInfo_var > BeanInfo_out;

#ifndef __tweek_mBeanDeliverySubject__
#define __tweek_mBeanDeliverySubject__

  class BeanDeliverySubject;
  class _objref_BeanDeliverySubject;
  class _impl_BeanDeliverySubject;
  
  typedef _objref_BeanDeliverySubject* BeanDeliverySubject_ptr;
  typedef BeanDeliverySubject_ptr BeanDeliverySubjectRef;

  class BeanDeliverySubject_Helper {
  public:
    typedef BeanDeliverySubject_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_BeanDeliverySubject, BeanDeliverySubject_Helper> BeanDeliverySubject_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_BeanDeliverySubject,BeanDeliverySubject_Helper > BeanDeliverySubject_out;

#endif

  // interface BeanDeliverySubject
  class BeanDeliverySubject {
  public:
    // Declarations for this interface type.
    typedef BeanDeliverySubject_ptr _ptr_type;
    typedef BeanDeliverySubject_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_BeanDeliverySubject :
    public virtual _objref_Subject
  {
  public:
    BeanNameList* getAllBeanNames();
    BeanInfo* getBean(const char* beanName);
    ::CORBA::Boolean hasActiveBean();
    BeanInfo* getActiveBeanInfo();

    inline _objref_BeanDeliverySubject()  { _PR_setobj(0); }  // nil
    _objref_BeanDeliverySubject(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_BeanDeliverySubject();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_BeanDeliverySubject(const _objref_BeanDeliverySubject&);
    _objref_BeanDeliverySubject& operator = (const _objref_BeanDeliverySubject&);
    // not implemented

    friend class BeanDeliverySubject;
  };

  class _pof_BeanDeliverySubject : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_BeanDeliverySubject() : _OMNI_NS(proxyObjectFactory)(BeanDeliverySubject::_PD_repoId) {}
    virtual ~_pof_BeanDeliverySubject();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_BeanDeliverySubject :
    public virtual _impl_Subject
  {
  public:
    virtual ~_impl_BeanDeliverySubject();

    virtual BeanNameList* getAllBeanNames() = 0;
    virtual BeanInfo* getBean(const char* beanName) = 0;
    virtual ::CORBA::Boolean hasActiveBean() = 0;
    virtual BeanInfo* getActiveBeanInfo() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_tweek
_CORBA_MODULE_BEG

  class BeanDeliverySubject :
    public virtual tweek::_impl_BeanDeliverySubject,
    public virtual Subject
  {
  public:
    virtual ~BeanDeliverySubject();

    inline ::tweek::BeanDeliverySubject_ptr _this() {
      return (::tweek::BeanDeliverySubject_ptr) _do_this(::tweek::BeanDeliverySubject::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_tweek
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
tweek::BeanDeliverySubject::_marshalObjRef(::tweek::BeanDeliverySubject_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_BeanDeliverySubject
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_BeanDeliverySubject
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_BeanDeliverySubject
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_BeanDeliverySubject
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_BeanDeliverySubject
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_BeanDeliverySubject
#endif

#endif  // __BeanDeliverySubject_hh__

